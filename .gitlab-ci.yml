# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- setup
- rtl-sim
- harden
- integration
- precheck

caravel_user_project:
  stage: setup
  tags:
    - general-purpose:sequential
  variables:
    GIT_STRATEGY: clone    
  script:
    - echo "Setting up environment ... "
    - |+
      python3 -m venv venv
      . ./venv/bin/activate
      export PDK=gf180mcuD 
      make setup
    - echo "Environment setup complete. Hardening macros ..."

rv32im:
  stage: setup
  tags:
    - general-purpose:sequential
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Building RISCV32-IM toolchain, assuming all dependent packages are installed ..."
    - |+
      ORIGIN_DIR=${PWD}
      git clone https://github.com/riscv/riscv-gnu-toolchain
      cd riscv-gnu-toolchain
      mkdir build 
      cd build
      ../configure --with-arch=rv32i --prefix=${ORIGIN_DIR}/rv32im
      make -j$(nproc)
      make install
    - echo "RV32IM toolchain built successfully."

rtl-bootloader:
  stage: rtl-sim
  tags:
    - general-purpose:sequential
  needs: ["caravel_user_project", "rv32im"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Running bootloader rtl (functional) simulation ..."
    - |+
      . ./venv/bin/activate
      make CROSS=./rv32im/bin/riscv32-unknown-elf- -C ./verilog/bootloader_user_wrapper_wo_caravel/fw/app_02 firmware
      make verify-bootloader_user_wrapper_wo_caravel-rtl
    - echo "rtl (functional) simulation complete."

rtl-pcpi-rv32im:
  stage: rtl-sim
  tags:
    - general-purpose:sequential
  needs: ["caravel_user_project", "rv32im"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Running bootloader with RV32IM pcpi modules rtl (functional) simulation ..."
    - |+
      . ./venv/bin/activate
      make CROSS=./rv32im/bin/riscv32-unknown-elf- -C ./verilog/bootloader_user_wrapper_wo_caravel/fw/app_04 firmware
      make verify-pcpi_bootloader_user_wrapper_wo_caravel-rtl
    - echo "rtl (functional) simulation complete."

rtl-pcpi-custom:
  stage: rtl-sim
  tags:
    - general-purpose:sequential
  needs: ["caravel_user_project", "rv32im"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Running bootloader with custom pcpi modules rtl (functional) simulation ..."
    - |+
      . ./venv/bin/activate
      make CROSS=./rv32im/bin/riscv32-unknown-elf- -C ./verilog/bootloader_user_wrapper_wo_caravel/fw/app_05 firmware
      make verify-pcpi_exact_approx_bootloader_user_wrapper_wo_caravel-rtl
    - echo "rtl (functional) simulation complete."

cpu:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the cpu module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make cpu
    - echo "Hardening complete."

ctrl:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the ctrl module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make ctrl
    - echo "Hardening complete."

flash_controller:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the flash_controller module ..."
    - |+
      python3 -m venv venv
      # . ./venv/bin/activate
      make flash_controller
    - echo "Hardening complete."

gf180_ram_512x8x1:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the gf180_ram_512x8x1 module ..."
    - |+
      python3 -m venv venv
      # . ./venv/bin/activate
      make gf180_ram_512x8x1
    - echo "Hardening complete."

pcpi_approx_mul:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the pcpi_approx_mul module ..."
    - |+
      python3 -m venv venv
      # . ./venv/bin/activate
      make pcpi_approx_mul
    - echo "Hardening complete."

pcpi_div:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the pcpi_div module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make pcpi_div
    - echo "Hardening complete."

pcpi_exact_mul:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the pcpi_exact_mul module ..."
    - |+
      python3 -m venv venv
      # . ./venv/bin/activate
      make pcpi_exact_mul
    - echo "Hardening complete."

pcpi_mul:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the pcpi_mul module ..."
    - |+
      python3 -m venv venv
      # . ./venv/bin/activate
      make pcpi_mul
    - echo "Hardening complete."

simple_interconnect:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the simple_interconnect module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make simple_interconnect
    - echo "Hardening complete."  

uart:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the uart module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make uart
    - echo "Hardening complete."  

user_proj_example:
  stage: harden
  tags:
    - general-purpose:sequential
  needs: ["rtl-bootloader", "rtl-pcpi-rv32im", "rtl-pcpi-custom"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the user_proj_example module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make user_proj_example
    - echo "Hardening complete."  

user_project_wrapper:
  stage: integration
  tags:
    - general-purpose:sequential
  needs: ["cpu", "ctrl", "flash_controller", "gf180_ram_512x8x1", "pcpi_approx_mul", "pcpi_div", "pcpi_exact_mul", "pcpi_mul", "simple_interconnect", "uart", "user_proj_example"]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Hardening the user_proj_example module ..."
    - |+
      # python3 -m venv venv
      . ./venv/bin/activate
      make user_proj_example
    - echo "Hardening complete."  

make_precheck:
  stage: precheck
  tags:
    - general-purpose:sequential
  needs: ["user_project_wrapper"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Setting up environment ... "
    - |+
      python3 -m venv venv
      . ./venv/bin/activate
    - echo "Making precheck."
    - |+
      make precheck
    - echo "Precheck build complete."

run_precheck:
  stage: precheck
  tags:
    - general-purpose:sequential
  needs: ["make_precheck"]    
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN: none
  script:
    - echo "Setting up environment ... "
    - |+
      python3 -m venv venv
      . ./venv/bin/activate
    - echo "Making precheck."
    - |+
      make run-precheck
    - echo "Precheck complete."    


# picosoc-w-approximation:
#   stage: precheck
#   tags:
#     - general-purpose
#   variables:
#     GIT_STRATEGY: fetch
#   script:
#     - echo "Setting up environment ... "
#     - |+
#       python3 -m venv venv
#       . ./venv/bin/activate
#       export PDK=gf180mcuD 
#       make setup
#     - echo "Environment setup complete. Hardening macros ..."
#     - |+
#       make cpu
#       make ctrl
#       make flash_controller
#       make gf180_ram_512x8x1
#       make pcpi_approx_mul
#       make pcpi_div
#       mmake pcpi_exact_mul
#       make pcpi_mul
#       make simple_interconnect
#       make uart
#       make user_proj_example
#     - echo "Hardening macros complete. Performing chip integration ... "
#     - |+
#       make user_project_wrapper
#     - echo "Chip integration complete. Running precheck."
#     - |+
#       make precheck
#       make run-precheck
#     - echo "Precheck complete."

# include:
# - template: Auto-DevOps.gitlab-ci.yml